namespace LeetCodeNet.Easy.Strings
{
    /// <summary>
    /// https://leetcode.com/problems/find-the-difference/
    /// </summary>
    /// <remarks>
    /// You are given two strings s and t.
    /// String t is generated by random shuffling string s and then add one more letter at a random position.
    /// Return the letter that was added to t.
    /// </remarks>
    public class FindtheDifference_389
    {
        /// <summary>
        /// Not very optimal solution to order each string and then compare char by char
        /// </summary>
        /// <param name="s"> Source string </param>
        /// <param name="t"> Source string with added char </param>
        /// <returns> Added char </returns>
        /// <remarks>
        /// Time complexity: O(n*log(n) + m*log(m)), for sorting two arrays
        /// Space complexity: O(m+n)
        /// </remarks>
        public char FindTheDifferenceSort(string s, string t)
        {
            var sSorted = s.OrderBy(x => x).ToArray();
            var tSorted = t.OrderBy(x => x).ToArray();
            for (var i = 0; i < sSorted.Length; ++i)
            {
                if (sSorted[i] != tSorted[i])
                {
                    return tSorted[i];
                }
            }

            return tSorted[tSorted.Length - 1];
        }

        /// <summary>
        /// Create array with alphabets and use it to find new char
        /// </summary>
        /// <param name="s"> Source string </param>
        /// <param name="t"> Source string with added char </param>
        /// <returns> Added char </returns>
        /// <remarks>
        /// Time complexity: O(n) + O(m)
        /// Space complexity: O(1)
        /// </remarks>
        public char FindTheDifferenceHash(string s, string t)
        {
            var alphabetArray = new int[26];
            for (var i = 0; i < s.Length; ++i)
            {
                ++alphabetArray[s[i] - 'a'];
            }

            for (var i = 0; i < t.Length; ++i)
            {
                if (alphabetArray[t[i] - 'a'] == 0)
                {
                    return t[i];
                }

                --alphabetArray[t[i] - 'a'];
            }

            throw new ArgumentException();
        }

        /// <summary>
        /// Manipulate chars as int values. So, diff between sum of all values in the new string and sum of all values in the source string equals added char
        /// </summary>
        /// <param name="s"> Source string </param>
        /// <param name="t"> Source string with added char </param>
        /// <returns> Added char </returns>
        /// <remarks>
        /// Time complexity: O(n)
        /// Space complexity: O(1)
        /// </remarks>
        public char FindTheDifferenceMath(string s, string t)
        {
            var sum = t[t.Length - 1];
            for (var i = 0; i < s.Length; ++i)
            {
                sum -= s[i];
                sum += t[i];
            }

            return sum;
        }
    }
}